@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using System.Net
@using System.Text.Json
@using System.Net.Http.Json
@using BlazorApp2.Request
@using BlazorApp2.Response

@page "/login"

<div class="container_lk">
    <div>

        <EditForm Model="user"
        class="auth_back"
        OnValidSubmit="AuthAsync">

            <DataAnnotationsValidator />

            <p>Логин</p>

            <span>@LoginResult</span>

            <InputText placeholder="Введите логин"
            class="auth"
            @bind-Value="user.Username" />
            <ValidationMessage For="() => user.Username" />

            <p>Пароль</p>

            <InputText placeholder="Введите пароль"
            typeof="password"
            class="auth"
            @bind-Value="user.Password" />
            <ValidationMessage For="() => user.Password" />


            @* <NavLink href="afterAuthoPage">Test link</NavLink> *@
            <button type="submit"
            class="authbutn">
                Войти
            </button>
        </EditForm>
    </div>

</div>


@code {
    [Inject] private NavigationManager? NavigationManager { get; set; }
    [Inject] private HttpClient? HttpClient { get; set; }
    [Inject] private IJSRuntime? JS { get; set; }
    [Inject] private ILocalStorageService? LocalStorageService { get; set; }
    [Inject] private IHttpClientFactory? HttpClientFactory { get; set; }

    // [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }

    private User user = new();
    private string LoginResult = "";

    private async Task AuthAsync()
    {

        try
        {

            var httpClient = HttpClientFactory.CreateClient("APIshecka");
            var response = await httpClient.PostAsJsonAsync("Users/login", user);

            if (response.StatusCode == HttpStatusCode.BadRequest) {

                LoginResult = await response.Content.ReadAsStringAsync();
                return;
            }

            if (response.StatusCode == HttpStatusCode.NotFound)
            {
                LoginResult = await response.Content.ReadAsStringAsync();
                return;
            }

            if (response.StatusCode == HttpStatusCode.OK)
            {

                var tokenResponse = await response.Content.ReadFromJsonAsync<JwtTokenResponse>();

                await LocalStorageService.SetItemAsync<string>("jwt-token", tokenResponse.JwtToken);
                await JS.InvokeVoidAsync("setTokenExpirationTimer", 1);
                NavigationManager.NavigateTo("newsAdd", true);
                return;
            }
        }

        catch (HttpRequestException e)
        {
            LoginResult = $"{e.Message}";
            return;
        }

        catch (Exception e)
        {
            LoginResult = $"{e.Message}";
            return;
        }

    }

}
